# Alternative Dockerfile with more robust dependency handling
# Use the official Node.js 20 image
FROM node:20-alpine AS base

# Install dependencies needed for native binaries
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    libc6-compat

# Set working directory
WORKDIR /app

# Copy package.json only (not package-lock.json)
COPY package.json ./
COPY .npmrc ./

# Install dependencies and let npm create a fresh lock file
RUN npm install

# Rebuild lightningcss for the current platform
RUN npm rebuild lightningcss

# Development stage
FROM base AS development
COPY . .
RUN npm run build

# Production stage
FROM node:20-alpine AS production

# Install only production dependencies
WORKDIR /app
COPY package.json ./
COPY .npmrc ./

# Install production dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    libc6-compat && \
    npm install --omit=dev && \
    npm rebuild lightningcss && \
    apk del python3 make g++

# Copy built application from development stage
COPY --from=development /app/.next ./.next
COPY --from=development /app/public ./public
COPY --from=development /app/src ./src
COPY --from=development /app/middleware.ts ./middleware.ts

# Expose port
EXPOSE 3000

# Set environment to production
ENV NODE_ENV=production

# Start the application
CMD ["npm", "start"]